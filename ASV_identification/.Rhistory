names(out) <- paste(col, sep = "")
# 241_S148_R1_filtered.fastq.gz might not be saturation (Oxford hoop house). May need to consider excluding.
#rarefying
FarmTour2_16s<-rarefy_even_depth(FarmTour1_16s.noncontamNoBlanks, sample.size = min(sample_sums(FarmTour1_16s.noncontamNoBlanks)), rngseed =TRUE)  #68770 OTUs removed bc no longer present after sampling
#saving rarefied phyloseq object
#saveRDS(FarmTour2_16s, "FarmTour2_16s_012022.rds")
FarmTour2_16s <-readRDS("FarmTour2_16s_012022.rds")
set.seed(TRUE); .Random.seed
#rarefying
FarmTour2_16s<-rarefy_even_depth(FarmTour1_16s.noncontamNoBlanks, sample.size = min(sample_sums(FarmTour1_16s.noncontamNoBlanks)), rngseed =TRUE)  #69290 ASVs removed bc no longer present after sampling
#saving rarefied phyloseq object
saveRDS(FarmTour2_16s, "FarmTour2_16s_012022.rds")
FarmTour2_16s <-readRDS("FarmTour2_16s_012022.rds")
# function to extract otu_table() from a phyloseq object to a vegan compatible data object
psotu2veg <- function(physeq) {
OTU <- otu_table(physeq)
if (taxa_are_rows(OTU)) {
OTU <- t(OTU)
}
return(as(OTU, "matrix"))
}
ASV_table <- psotu2veg(FarmTour2_16s)
View(ASV_table)
smallest_sample = min(sample_sums(FarmTour1_16s.noncontamNoBlanks))
rare_dist_matrix <- avgdist(FarmTour1_16s.noncontamNoBlanks, dmethod = "bray", sample=smallest)
smallest_sample = min(sample_sums(FarmTour1_16s.noncontamNoBlanks))
rare_dist_matrix <- avgdist(FarmTour1_16s.noncontamNoBlanks, dmethod = "bray", sample=smallest_sample)
# function to extract otu_table() from a phyloseq object to a vegan compatible data object
psotu2veg <- function(physeq) {
OTU <- otu_table(physeq)
if (taxa_are_rows(OTU)) {
OTU <- t(OTU)
}
return(as(OTU, "matrix"))
}
ASV_table <- psotu2veg(FarmTour1_16s.noncontamNoBlanks)
smallest_sample = min(sample_sums(FarmTour1_16s.noncontamNoBlanks))
rare_dist_matrix <- avgdist(ASV_table, dmethod = "bray", sample=smallest_sample)
?metaMDS
set.see(1)
set.seed(1)
nmds <- metaMDS(rare_dist_matrix)
FarmTour2_16s_rare_permutation <- rrarefy.perm(FarmTour1_16s.noncontamNoBlanks, sample = smallest_sample, n = 100, round.out = T)
devtools::install_github("GuillemSalazar/EcolUtils")
#devtools::install_github("GuillemSalazar/EcolUtils")
library(EcolUtils)
FarmTour2_16s_rare_permutation <- rrarefy.perm(FarmTour1_16s.noncontamNoBlanks, sample = smallest_sample, n = 100, round.out = T)
#devtools::install_github("GuillemSalazar/EcolUtils")
library(EcolUtils)
FarmTour2_16s_rare_permutation <- rrarefy.perm(ASV_table, sample = smallest_sample, n = 100, round.out = T)
#devtools::install_github("GuillemSalazar/EcolUtils")
library(EcolUtils)
FarmTour2_16s_rare_permutation <- rrarefy.perm(ASV_table, sample = smallest_sample, n = 100, round.out = T)
# Place ASV table back in a phyloseq object
count_tab_phy <- otu_table(FarmTour2_16s_rare_permutation, taxa_are_rows=T)
FarmTour2_16s_rare_permutation <- phyloseq(count_tab_phy, FarmTour2_16s@tax_table, FarmTour2_16s@sam_data) #incorporating transformed counts into phyloseq object
View(FarmTour2_16s_rare_permutation)
View(CLR)
colSums(FarmTour2_16s_rare_permutation)
rowSums(FarmTour2_16s_rare_permutation)
smallest_sample
?otu_table
# Place ASV table back in a phyloseq object
count_tab_phy <- otu_table(FarmTour2_16s_rare_permutation)
# Place ASV table back in a phyloseq object
count_tab_phy <- otu_table(FarmTour2_16s_rare_permutation, taxa_are_rows = FALSE)
FarmTour2_16s_rare_permutation <- phyloseq(count_tab_phy, FarmTour2_16s@tax_table, FarmTour2_16s@sam_data) #incorporating transformed counts into phyloseq object
View(FarmTour2_16s_rare_permutation)
FarmTour2_16s_rare_permutation@otu_table[1:5]
FarmTour2_16s@otu_table[1:5]
#devtools::install_github("GuillemSalazar/EcolUtils")
library(EcolUtils)
FarmTour2_16s_rare_permutation <- rrarefy.perm(ASV_table, sample = smallest_sample, n = 100, round.out = T)
colnames(FarmTour2_16s_rare_permutation)
# Place ASV table back in a phyloseq object
count_tab_phy <- otu_table(FarmTour2_16s_rare_permutation, taxa_are_rows = T)
FarmTour2_16s_r <- phyloseq(count_tab_phy, FarmTour1_16s.noncontamNoBlanks@tax_table, FarmTour1_16s.noncontamNoBlanks@sam_data) #incorporating transformed counts into phyloseq object
# Place ASV table back in a phyloseq object
count_tab_phy <- otu_table(FarmTour2_16s_rare_permutation, taxa_are_rows = F)
FarmTour2_16s_r <- phyloseq(count_tab_phy, FarmTour1_16s.noncontamNoBlanks@tax_table, FarmTour1_16s.noncontamNoBlanks@sam_data) #incorporating transformed counts into phyloseq object
head(ASV_table)
ASV_table[1:5, 1:5]
count_tab[1:5, 1:5]
names(ASV_table)
?prune_taxa
tax_tab[1:5, 1:5]
tax_tab[c("ASV_1"", "ASV_2""), ]
subset(tax_tab, rownames(tax_tab) %in% c("ASV_1", "ASV_2"))
x <- subset(tax_tab, rownames(tax_tab) %in% colnames(ASV_table))
x[1:10, 1:5]
x[1000:1010, 1:5]
x[10000:10010, 1:5]
# Place ASV table back in a phyloseq object
count_tab_phy <- otu_table(FarmTour2_16s_rare_permutation, taxa_are_rows = F)
x <- subset(tax_tab, rownames(tax_tab) %in% colnames(ASV_table))
tax_tab_phy2 <- tax_table(x)
#sample_info_tab_phy<-sample_data(sample_info_tab)
FarmTour2_16s_r <- phyloseq(count_tab_phy, tax_tab_phy2, FarmTour1_16s.noncontamNoBlanks@sam_data) #incorporating transformed counts into phyloseq object
FT.ord <- ordinate(FarmTour2_16s_r, "NMDS", "bray")
FT.nmds.plot <- plot_ordination(FarmTour2_16s_r, FT.ord, type="taxa", color = "Phylum", title = "taxa")
print(FT.nmds.plot)
FT.nmds.plot_samples <- plot_ordination(FarmTour2_16s_r, FT.ord, type = "samples", color = "Code", shape = "PhysiographicRegion")
FT.nmds.plot_samples
# Place ASV table back in a phyloseq object
count_tab_phy <- otu_table(FarmTour2_16s_rare_permutation, taxa_are_rows = F)
x <- subset(tax_tab, rownames(tax_tab) %in% colnames(ASV_table))
tax_tab_phy2 <- tax_table(x)
#sample_info_tab_phy<-sample_data(sample_info_tab)
FarmTour2_16s_r <- phyloseq(count_tab_phy, tax_tab_phy2, FarmTour1_16s.noncontamNoBlanks@sam_data) #incorporating transformed counts into phyloseq object
FT.ord <- ordinate(FarmTour2_16s_r, "NMDS", "bray")
FT.nmds.plot <- plot_ordination(FarmTour2_16s_r, FT.ord, type="taxa", color = "Phylum", title = "taxa")
print(FT.nmds.plot)
FT.nmds.plot_samples <- plot_ordination(FarmTour2_16s_r, FT.ord, type = "samples", color = "Code", shape = "PhysiographicRegion")
FT.nmds.plot_samples
dist = "bray"
ord_meths = c("DCA", "CCA", "RDA", "DPCoA", "NMDS", "MDS", "PCoA")
plist = llply(as.list(ord_meths), function(i, physeq, dist){
ordi = ordinate(physeq, method=i, distance=dist)
plot_ordination(physeq, ordi, "samples", color="Code")
}, FarmTour2_16s_r, dist)
library("plyr")
detach("package:dplyr", unload = TRUE)
detach("package:plyr", unload = TRUE)
detach("package:phyloseq", unload = TRUE)
library(phyloseq)
library(vegan)
library(plyr)
library(dplyr)
library(doBy)
library(ggplot2)
#library("plyr")
dist = "bray"
ord_meths = c("DCA", "CCA", "RDA", "DPCoA", "NMDS", "MDS", "PCoA")
plist = llply(as.list(ord_meths), function(i, physeq, dist){
ordi = ordinate(physeq, method=i, distance=dist)
plot_ordination(physeq, ordi, "samples", color="Code")
}, FarmTour2_16s_r, dist)
?ntaxa
#Create random tree
library(ape)
random_tree = rtree(ntaxa(FarmTour2_16s_r), rooted=TRUE, tip.label=taxa_names(FarmTour2_16s_r))
#Merge your data with random tree
physeq1 = merge_phyloseq(FarmTour2_16s_r, random_tree)
plist = llply(as.list(ord_meths), function(i, physeq, dist){
ordi = ordinate(physeq, method=i, distance=dist)
plot_ordination(physeq, ordi, "samples", color="Code")
}, FarmTour2_16s_r, dist)
plist = llply(as.list(ord_meths), function(i, physeq, dist){
ordi = ordinate(physeq, method=i, distance=dist)
plot_ordination(physeq, ordi, "samples", color="Code")
}, physeq1, dist)
ord_meths = c("DCA", "CCA", "RDA", "NMDS", "MDS", "PCoA")
#Create random tree
#library(ape)
#random_tree = rtree(ntaxa(FarmTour2_16s_r), rooted=TRUE, tip.label=taxa_names(FarmTour2_16s_r))
#Merge your data with random tree
#physeq1 = merge_phyloseq(FarmTour2_16s_r, random_tree)
plist = llply(as.list(ord_meths), function(i, physeq, dist){
ordi = ordinate(physeq, method=i, distance=dist)
plot_ordination(physeq, ordi, "samples", color="Code")
}, FarmTour2_16s_r, dist)
#Create random tree
#library(ape)
#random_tree = rtree(ntaxa(FarmTour2_16s_r), rooted=TRUE, tip.label=taxa_names(FarmTour2_16s_r))
#Merge your data with random tree
#physeq1 = merge_phyloseq(FarmTour2_16s_r, random_tree)
plist = llply(as.list(ord_meths), function(i, physeq, dist){
ordi = ordinate(physeq, method=i, distance=dist, trymax=50)
plot_ordination(physeq, ordi, "samples", color="Code")
}, FarmTour2_16s_r, dist)
?ordinate
?trymax
plist = llply(as.list(ord_meths), function(i, physeq, dist){
ordi = ordinate(physeq, method=i, distance=dist)
plot_ordination(physeq, ordi, "samples", color="Code")
}, FarmTour2_16s_r, dist)
names(plist) <- ord_meths
pdataframe = ldply(plist, function(x){
df = x$data[, 1:2]
colnames(df) = c("Axis_1", "Axis_2")
return(cbind(df, x$data))
})
names(pdataframe)[1] = "method"
p = ggplot(pdataframe, aes(Axis_1, Axis_2, color=Code, shape=PhysiographicRegion, fill=Code))
p = p + geom_point(size=4) + geom_polygon()
p = p + facet_wrap(~method, scales="free")
p = p + scale_fill_brewer(type="qual", palette="Set1")
p = p + scale_colour_brewer(type="qual", palette="Set1")
p
p = ggplot(pdataframe, aes(Axis_1, Axis_2, color=Code, shape=PhysiographicRegion,))
p = p + geom_point(size=4) + geom_polygon()
p = p + facet_wrap(~method, scales="free")
p = p + scale_fill_brewer(type="qual", palette="Set1")
p = p + scale_colour_brewer(type="qual", palette="Set1")
p
p <- NULL
p = ggplot(pdataframe, aes(Axis_1, Axis_2, color=FieldorTunnel, shape=PhysiographicRegion, fill=FieldorTunnel))
p = p + geom_point(size=4) + geom_polygon()
p = p + facet_wrap(~method, scales="free")
p = p + scale_fill_brewer(type="qual", palette="Set1")
p = p + scale_colour_brewer(type="qual", palette="Set1")
p
p = ggplot(pdataframe, aes(Axis_1, Axis_2, color=FieldorTunnel, shape=PhysiographicRegion, fill=FieldorTunnel))
p = p + geom_point(size=3)
p = p + facet_wrap(~method, scales="free")
p = p + scale_fill_brewer(type="qual", palette="Set1")
p = p + scale_colour_brewer(type="qual", palette="Set1")
p
p = ggplot(pdataframe, aes(Axis_1, Axis_2, color=PhysiographicRegion, shape=FieldorTunnel, fill=PhysiographicRegion))
p = p + geom_point(size=3)
p = p + facet_wrap(~method, scales="free")
p = p + scale_fill_brewer(type="qual", palette="Set1")
p = p + scale_colour_brewer(type="qual", palette="Set1")
p
plist[[5]]
plist[[3]]
plist[[6]]
plist[[1]]
plist[[3]]
plist[[3]]
plist[[5]]
plist[[6]]
plist = llply(as.list(ord_meths), function(i, physeq, dist){
ordi = ordinate(physeq, method=i, distance=dist)
plot_ordination(physeq, ordi, "samples", color="PhysiographicRegion")
}, FarmTour2_16s_r, dist)
names(plist) <- ord_meths
pdataframe = ldply(plist, function(x){
df = x$data[, 1:2]
colnames(df) = c("Axis_1", "Axis_2")
return(cbind(df, x$data))
})
names(pdataframe)[1] = "method"
p = ggplot(pdataframe, aes(Axis_1, Axis_2, color=PhysiographicRegion, shape=FieldorTunnel, fill=PhysiographicRegion))
p = p + geom_point(size=3)
p = p + facet_wrap(~method, scales="free")
p = p + scale_fill_brewer(type="qual", palette="Set1")
p = p + scale_colour_brewer(type="qual", palette="Set1")
p
plist[[6]]
#PCoA is the plot "number" 6 in ord_methods
p = plist[[6]] + geom_point(size=4)
p
p
sample_info_tab %>% dim
# Remove explanatory variables (diseases)
sample_info_tab_explanatory <- sample_info_tab_explanatory[,113:114]
# Remove explanatory variables (diseases)
sample_info_tab_explanatory <- sample_info_tab[,113:114]
sample_info_tab[, 113:114] <- NULL
res <- cor(sample_info_tab_explanatory, method="Pearson")
# Looking for correlation among variables
res <- cor(sample_info_tab_explanatory, method="pearson")
corrplot::corrplot(res, method= "color", order = "hclust", tl.pos = 'n')
install.packages("corrplot")
corrplot::corrplot(res, method= "color", order = "hclust", tl.pos = 'n')
View(sample_info_tab_explanatory)
res <- cor(sample_info_tab, method="pearson")
# Looking for correlation among variables
sample_info_tab_numeric <- sample_info_tab[, is.numeric(sample_info_tab)]
res <- cor(sample_info_tab, method="pearson")
# Looking for correlation among variables
sample_info_tab_numeric <- sample_info_tab[is.numeric(sample_info_tab), ]
res <- cor(sample_info_tab, method="pearson")
is.numeric(sample_info_tab)
# Looking for correlation among variables
sample_info_tab_numeric <- sample_info_tab[,unlist(lapply(sample_info_tab, is.numeric)) ]
res <- cor(sample_info_tab_numeric, method="pearson")
corrplot::corrplot(res, method= "color", order = "hclust", tl.pos = 'n')
View(sample_info_tab)
View(sample_info_tab_numeric)
sample_info_tab_numeric[!(rownames(sample_info_tab_numeric)) %in% c("218_S125_R1_filtered.fastq.gz", "267_S75_R1_001.gz"), ]
sample_info_tab_numeric_ncontrol <- sample_info_tab_numeric[!(rownames(sample_info_tab_numeric)) %in% c("218_S125_R1_filtered.fastq.gz", "267_S75_R1_001.gz"), ]
sample_info_tab_numeric_ncontrol[, c("p_rating", "k_rating", "minor_elements_rating", "Root-Knot", "Lesion", "Stubby-root", "Ring", "Stunt")] <- NULL
res <- cor(sample_info_tab_numeric_ncontrol, method="pearson")
corrplot::corrplot(res, method= "color", order = "hclust", tl.pos = 'n')
View(sample_info_tab_numeric_ncontrol)
sample_info_tab_numeric_ncontrol <- sample_info_tab_numeric_ncontrol %>%
select_if(~ !any(is.na(.)))
res <- cor(sample_info_tab_numeric_ncontrol, method="pearson")
corrplot::corrplot(res, method= "color", order = "hclust", tl.pos = 'n')
View(sample_info_tab_numeric_ncontrol)
BiocManager::install("miaViz")
BiocManager::install("miaViz")
install.packages(rlang)
install.packages("rlang")
install.packages("rlang")
detach("package:datasets", unload = TRUE)
detach("package:graphics", unload = TRUE)
detach("package:grDevices", unload = TRUE)
detach("package:methods", unload = TRUE)
detach("package:stats", unload = TRUE)
detach("package:utils", unload = TRUE)
install.packages("rlang")
install.packages("rlang")
install.packages("rlang")
BiocManager::install("miaViz")
gc()
library(tidyverse)
setwd("/Users/ento-user/Library/CloudStorage/OneDrive-UniversityofGeorgia/Burrower Bug/BB diet and popgen paper/diet analysis/SpeciesID/BowtieAlignment")
#load input files
summary_bowtie_MC_part1 <- read_tsv("./summary_table_bowtie_updated.txt")
summary_bowtie_MC_part2 <- read_tsv("./summary_remainingfiles_updated.txt")
summary_bowtie_PAPR <- read_tsv("./summary_pbb3.txt")
metadata_trnf <- read_csv("./trnF_samples_metadata_with_IDS.csv")
metadata_trnf <- read_csv("./trnF_samples_metadata_with_IDS.csv")
# Merge files and save
merge_bowtie_metadata <- left_join(metadata_trnf, summary_bowtie[,2:5], by="Indiv_ID")
summary_bowtie_MC_part1 <- read_tsv("./summary_table_bowtie_updated 2.txt")
summary_bowtie_MC_part2 <- read_tsv("./summary_remainingfiles_updated.txt")
summary_bowtie_PAPR <- read_tsv("./summary_pbb3.txt")
metadata_trnf <- read_csv("./trnF_samples_metadata_with_IDS.csv")
View(metadata_trnf)
View(summary_bowtie_MC_part1)
View(summary_bowtie_MC_part2)
View(summary_bowtie_PAPR)
names(summary_bowtie_MC_part1)
#load input files
summary_bowtie_MC_part1 <- read_tsv("./summary_table_bowtie_updated 2.txt") %>% select(Indiv_ID, perc_alig_low_mapper, perc_alig_ref)
#load input files
summary_bowtie_MC_part1 <- read_tsv("./summary_table_bowtie_updated 2.txt") %>% select(Indiv_ID, High Mapper, Low Mapper)
names(summary_bowtie_MC_part1) <- str_replace_all(names(summary_bowtie_MC_part1), c(" " = "."))
names(summary_bowtie_MC_part2) <- str_replace_all(names(summary_bowtie_MC_part2), c(" " = "."))
names(summary_bowtie_PAPR) <- str_replace_all(names(summary_bowtie_PAPR), c(" " = "."))
#load input files
summary_bowtie_MC_part1 <- read_tsv("./summary_table_bowtie_updated 2.txt")
names(summary_bowtie_MC_part1) <- str_replace_all(names(summary_bowtie_MC_part1), c(" " = "."))
summary_bowtie_MC_part2 <- read_tsv("./summary_remainingfiles_updated.txt")
names(summary_bowtie_MC_part2) <- str_replace_all(names(summary_bowtie_MC_part2), c(" " = "."))
summary_bowtie_PAPR <- read_tsv("./summary_pbb3.txt")
names(summary_bowtie_PAPR) <- str_replace_all(names(summary_bowtie_PAPR), c(" " = "."))
metadata_trnf <- read_csv("./trnF_samples_metadata_with_IDS.csv")
#Select columns
MC_part1 <- summary_bowtie_MC_part1 %>% select(Indiv_ID, High.Mapper, Low.Mapper)
View(MC_part1)
#Select columns, Rename columns, create Species ID column
MC_part1 <- summary_bowtie_MC_part1 %>% select(Indiv_ID, High.Mapper, Low.Mapper) %>% mutate(Sp.ID = case_when(
High.Mapper > 50 ~ "Pbilineatus", Low.Mapper < 50 ~ "Dlugubris", High.Mapper > 50 & Low.Mapper < 50 ~ "unknown")
)
#Select columns, Rename columns, create Species ID column
MC_part1 <- summary_bowtie_MC_part1 %>% select(Indiv_ID, High.Mapper, Low.Mapper) %>% mutate(Sp.ID = case_when(
High.Mapper > 50 ~ "Pbilineatus", Low.Mapper > 50 ~ "Dlugubris", High.Mapper < 50 & Low.Mapper < 50 ~ "unknown")
)
#Select columns, Rename columns, create Species ID column
MC_part1 <- summary_bowtie_MC_part1 %>% select(Indiv_ID, High.Mapper, Low.Mapper) %>% mutate(Sp.ID = case_when(
High.Mapper > 50 ~ "Pbilineatus", Low.Mapper > 50 ~ "Dlugubris", High.Mapper < 50 & Low.Mapper < 50 ~ "unknown")
)
MC_part2 <- summary_bowtie_MC_part2 %>% select(Indiv_ID, High.Mapper, Low.Mapper) %>% mutate(Sp.ID = case_when(
High.Mapper > 50 ~ "Pbilineatus", Low.Mapper > 50 ~ "Dlugubris", High.Mapper < 50 & Low.Mapper < 50 ~ "unknown")
)
PAPR_samples <- summary_bowtie_PAPR %>% rename(Sample.Name = Indiv_ID) %>% mutate(Sp.ID = case_when(
High.Mapper > 50 ~ "Pbilineatus", Low.Mapper > 50 ~ "Dlugubris", High.Mapper < 50 & Low.Mapper < 50 ~ "unknown")
)
PAPR_samples <- summary_bowtie_PAPR %>% rename(Indiv_ID = Sample.Name) %>% mutate(Sp.ID = case_when(
High.Mapper > 50 ~ "Pbilineatus", Low.Mapper > 50 ~ "Dlugubris", High.Mapper < 50 & Low.Mapper < 50 ~ "unknown")
)
View(MC_part2)
View(PAPR_samples)
# Merge files and save
merge_bowtie_metadata <- left_join(metadata_trnf, MC_part1, MC_part2, PAPR_samples, by="Indiv_ID")
all_samples <- bind_cols(MC_part1, MC_part2, PAPR_samples)
all_samples <- bind_rows(MC_part1, MC_part2, PAPR_samples)
View(all_samples)
# Merge files and save
merge_bowtie_metadata <- left_join(metadata_trnf, all_samples, by="Indiv_ID")
View(merge_bowtie_metadata)
write.csv(merge_bowtie_metadata, "./Burrower_bugs_metadata.csv")
# Merge files and save
merge_bowtie_metadata <- left_join(metadata_trnf, all_samples, by="Indiv_ID") %>% select(Site, collection_date, sample_name, Indiv_ID, sample_type, SequenceBatch,
Season, Month, Duplicated, barcode, Pop_ID, Date, Month.y, Year, High.Mapper, Low.Mapper, Sp.ID)
write.csv(merge_bowtie_metadata, "./Burrower_bugs_metadata.csv")
load("~/Documents/Github_Burrower_Bug/Burrower-Bugs-diet-and-pop-gen/ASV_identification/14NOV2024.RData")
setwd("/Users/ento-user/Documents/Github_Burrower_Bug/Burrower-Bugs-diet-and-pop-gen/ASV_identification")
setwd("/Users/ento-user/Documents/Github_Burrower_Bug/Burrower-Bugs-diet-and-pop-gen/ASV_identification")
set.seed("1805")
library(dada2);packageVersion("dada2") # ‘1.28.0’
library(Biostrings); packageVersion("Biostrings") #‘2.68.1’
library(ShortRead); packageVersion("ShortRead") #‘1.58.0’
library(ggplot2); packageVersion("ggplot2") #‘3.5.0’
library(reshape2); packageVersion("reshape2") #‘1.4.4’
library(gridExtra); packageVersion("gridExtra") #‘2.3’
library(phyloseq); packageVersion("phyloseq") #‘1.46.0’
library(dplyr); packageVersion("dplyr") #‘1.1.4’
pathPBB1 <- "../diet_data/PBB1"
pathPBB2 <- "../diet_data/PBB2"
pathPBB3 <- "../diet_data/PBB3"
path.out <- "Figures/"
path.rds <- "RDS/"
fnsPBB1 <- list.files(pathPBB1, pattern=".fastq", full.names=TRUE)
fnsPBB2 <- list.files(pathPBB2, pattern=".fastq", full.names=TRUE)
fnsPBB3 <- list.files(pathPBB3, pattern=".fastq", full.names=TRUE)
B49873_e <- "GGTTCAAGTCCCTCTATCCC"
A50272_f <- "ATTTGAACTGGTGACACGAG"
rc <- dada2:::rc
theme_set(theme_bw())
library(dplyr)
st.all_chimera_free <- readRDS("RDS/PBB_all_runs_2.rds")
tax <- readRDS("RDS/PBB_all_runs_tax_2.rds")
metadata <- read.table("./metadata_assembly/Burrower_bugs_metadata.csv", row.names = 3, sep = ",", header = TRUE)
metadata <- read.table("./metadata_assembly/Burrower_bugs_metadata.csv", sep = ",", header = TRUE)
View(metadata)
library(dplyr)
st.all_chimera_free <- readRDS("RDS/PBB_all_runs_2.rds")
tax <- readRDS("RDS/PBB_all_runs_tax_2.rds")
metadata <- read.table("./metadata_assembly/Burrower_bugs_metadata.csv", row.names = 3, sep = ",", header = TRUE) # Note, exclude first column (row number) before loading this spreadsheet
metadata$SequenceBatch <- as.factor(metadata$SequenceBatch)
metadata$collection_date <- as.Date(metadata$collection_date, format = "%m/%d/%Y")
metadata$Month <- factor(metadata$Month, levels = month.name)
View(metadata)
library(dplyr)
st.all_chimera_free <- readRDS("RDS/PBB_all_runs_2.rds")
tax <- readRDS("RDS/PBB_all_runs_tax_2.rds")
metadata <- read.table("./metadata_assembly/Burrower_bugs_metadata.csv", row.names = 3, sep = ",", header = TRUE) # Note, exclude first column (row number) before loading this spreadsheet
metadata$SequenceBatch <- as.factor(metadata$SequenceBatch)
metadata$collection_date <- as.Date(metadata$collection_date, format = "%m/%d/%y")
metadata$Month <- factor(metadata$Month, levels = month.name)
p_data <- phyloseq(otu_table(st.all_chimera_free, taxa_are_rows = FALSE),
sample_data(metadata),
tax_table(tax))
dna <- Biostrings::DNAStringSet(taxa_names(p_data))
names(dna) <- taxa_names(p_data)
p_data <- merge_phyloseq(p_data, dna)
taxa_names(p_data) <- paste0("ASV", seq(ntaxa(p_data)))
p_data
library(decontam)
df <- as.data.frame(sample_data(p_data))
df$LibrarySize <- sample_sums(p_data)
df <- df[order(df$LibrarySize),]
df$Index <- seq(nrow(df))
ggplot(data=df, aes(x=Index, y=LibrarySize, color=sample_type)) + geom_point()
sample_data(p_data)$is.neg <- sample_data(p_data)$sample_type == "control"
# adopting prevalence method to identify contaminants based on controls
# sensitivity set to low (threhold = 0.1)
contamdf.prev.01 <- isContaminant(p_data, method="prevalence", neg="is.neg")
table(contamdf.prev.01$contaminant)
contaminant.list <- which(contamdf.prev.01$contaminant)
tax_table(p_data)[contaminant.list,]
# sensitivity set to high (threshold = 0.5)
contamdf.prev.05 <- isContaminant(p_data, method="prevalence", neg="is.neg", threshold = 0.5)
table(contamdf.prev.05$contaminant)
contaminant.list <- which(contamdf.prev.05$contaminant)
tax_table(p_data)[contaminant.list,]
# Make phyloseq object of presence-absence in negative controls and true samples
ps.pa <- transform_sample_counts(p_data, function(abund) 1*(abund>0))
ps.pa.neg <- prune_samples(sample_data(ps.pa)$sample_type == "control", ps.pa)
ps.pa.pos <- prune_samples(sample_data(ps.pa)$sample_type == "sample", ps.pa)
# Make data.frame of prevalence in positive and negative samples
# for threshold=0.1
df.pa1 <- data.frame(pa.pos=taxa_sums(ps.pa.pos), pa.neg=taxa_sums(ps.pa.neg),
contaminant=contamdf.prev.01$contaminant)
ggplot(data=df.pa1, aes(x=pa.neg, y=pa.pos, color=contaminant)) + geom_point() +
xlab("Prevalence (Negative Controls)") + ylab("Prevalence (True Samples)") + ggtitle("Decontamination threshold=0.1")
# for threshold=0.5
df.pa5 <- data.frame(pa.pos=taxa_sums(ps.pa.pos), pa.neg=taxa_sums(ps.pa.neg),
contaminant=contamdf.prev.05$contaminant)
ggplot(data=df.pa5, aes(x=pa.neg, y=pa.pos, color=contaminant)) + geom_point() +
xlab("Prevalence (Negative Controls)") + ylab("Prevalence (True Samples)") + ggtitle("Decontamination threshold=0.5")
p_data.ord <- ordinate(p_data, "PCoA", "bray")
plot_ordination(p_data, p_data.ord, type="sample", color="sample_type", shape="SequenceBatch")+ geom_point(size=3)
p_data.noncontam <- prune_taxa(!contamdf.prev.05$contaminant, p_data)
p_data
p_data.noncontam
# Remove control samples from analysis
p_data.clean <-subset_samples(p_data.noncontam, sample_type!="control")
# Remove samples with zero ASV (zero column sums)
p_data.clean <- subset_samples(p_data.clean, sample_sums(p_data.clean) > 0)
p_data.clean %>%
tax_table() %>%
write.csv("./PBB123_asv_11182024.csv")
p_data.clean %>%
refseq() %>%
Biostrings::writeXStringSet("./PBB123_asv_11182024.fasta", append=FALSE,
compress=FALSE, compression_level=NA, format="fasta")
saveRDS(otu_table(p_data.clean), "RDS/p_data.cleanOTU.rds")
saveRDS(sample_data(p_data.clean), "RDS/p_data.cleanSampleData.rds")
saveRDS(tax_table(p_data.clean), "RDS/p_data.cleanOTUTaxaTable.rds")
saveRDS(refseq(p_data.clean), "RDS/p_data.cleanOTURefSeq.rds")
setwd("/scratch/pd88715/ref_seq_plastids")
p_data.cleanOTU <- readRDS("RDS/p_data.cleanOTU.rds")
p_data.cleanSampleData <- readRDS("RDS/p_data.cleanSampleData.rds")
p_data.cleanOTUTaxaTable <- readRDS("RDS/p_data.cleanOTUTaxaTable.rds")
p_data.cleanOTURefSeq <- readRDS("RDS/p_data.cleanOTURefSeq.rds")
p_data.clean <- phyloseq(otu_table(p_data.cleanOTU, taxa_are_rows = FALSE),
sample_data(p_data.cleanSampleData),
tax_table(p_data.cleanOTUTaxaTable),
refseq(p_data.cleanOTURefSeq))
new_tax_table <- read.csv("PBB123_asv_11182024.csv", row.names = 1)
new_tax <- tax_table(as.matrix(new_tax_table))
tax_table(p_data.clean) <- new_tax
#tax_table(p_data.clean) %>% as("matrix") %>% as_tibble
p_data.clean %>%
subset_taxa(is.na(Genus)) %>%
tax_table()
tail(taxa_sums(p_data.clean) < 2)
p_data.clean <- prune_taxa(taxa_sums(p_data.clean) > 1, p_data.clean) %>% subset_taxa(., Kingdom == "Viridiplantae")
#p_data.clean <- subset_samples(p_data.clean, Duplicated=="no")
p_data.clean <- subset_samples(p_data.clean, sample_sums(p_data.clean) > 0)
#tax_table(p_data.clean) %>% as("matrix") %>% as_tibble
p_data.clean %>%
subset_taxa(is.na(Genus)) %>%
tax_table()
# are there unexpected taxa?
unique(tax_table(p_data.clean)[,3])
# How many ASVs are mossses?
p_data.clean %>% subset_taxa(., Class == "Bryopsida") %>% tax_table() # two ASVs
p_data.clean
p_data.clean <- subset_taxa(p_data.clean, Class != "Bryopsida")
p_data.clean # now there are two fewer ASVs
saveRDS(otu_table(p_data.clean), "RDS/p_data.cleanOTU_cleaningcompleted.rds")
saveRDS(sample_data(p_data.clean), "RDS/p_data.cleanSampleData_cleaningcompleted.rds")
saveRDS(tax_table(p_data.clean), "RDS/p_data.cleanOTUTaxaTable_cleaningcompleted.rds")
saveRDS(refseq(p_data.clean), "RDS/p_data.cleanOTURefSeq_cleaningcompleted.rds")
